다중 접속 서버 : 서비스를 동시에 받을 수 있는 서버

프로세스 : 실행중인 프로그램을 의미

                하드에 저장된 게임은 프로세스가 아니다.

                실행 중인 상태가 아니므로

하나의 프로그램이 실행되기 위해서 여러 개의 프로세스를 생성하는

경우도 있다.

프로세스 ID : 프로세스마다 할당되는 유일한 숫자.  2 ~ 32768

                    1은 OS에서 초기화 관련해서 사용.
 
*  Fork()  :

  프로세스를 생성하는 방법

  다중 접속 서버를 구현하는데 있어서 가장 적절한 함수.

  호출한 프로세스의 복사본 프로세스를 생성

  성공시 원본 프로세스와 복사본 프로세스에게

  전달되는 리턴 값이 달라진다.

  실패시 -1 리턴

  모든 메모리 공간 및 스택을 그대로 복사

  똑 같은 프로그램을 완전히 독립된 프로세스가 실행하는 모습

  부모 프로세스 : 자식 프로세스의 ID 리턴

  자식 프로세스 :  0 리턴

  서로 다른 메모리 공간에서 실행되기 때문에 데이터 공유는 안된다.


* 좀비 프로세스

   사라지지 않고 좀비가 되어 시스템의 중요한 리소스를 차지해서

   성능을 저하시킴

* 좀비 프로세스가 되는 이유

 

커널은 비록 자식 프로세스의 실행이 끝났더라도, 리턴 값을

부모 프로세스에게 넘겨줄 때까지 자식 프로세스를

소멸시키지 않는다. 시그널을 날려줘야함 ( SIGCHILD 를 부모프로세스에 날려줘야함)

리턴값이 부모 프로세스에게 전달 되도록 해야 자식 프로세스가

소멸되지 않고 좀비 프로세스가 되는 것을 막을 수 있다.

좀비 프로세스가 커널에게 자식 프로세스가 리턴한 값을

전달해 달라고  요청하지 않으면 커널은 계속해서 리턴 값을

유지하고 있을 것이고 따라서 자식 프로세스는 좀비가 된다.
* 커널 : 운영체제의 기본적인 일들을 처리하는 핵심 모듈
* wait() 함수 : 좀비 프로세스가 생기는 것을 막는데 사용
    이미 종료된 자식 프로세스가 있다면, 그 프로세스가 리턴한

    값을 읽어 들인다.

    리턴 값은 종료된 자식 프로세스의 ID가 된다.

    wait()함수가 호출된 시점에서 종료된 자식 프로세스가 없다면

    임의의 자식 프로세스가 종료 될 때까지 블로킹 상태에

    놓이게 된다.

    호출하는 시점에서 종료된 자식 프로세스가 존재하지 않는다면

    무한정 블로킹에 빠짐

* waitpid( pid_t  pid ,  int  *status,   int options )

 Pid : 종료 확인을 원하는 자식 프로세스의 ID

         -1이 대입되면 wait 함수와 같이 임의의 자식 프로세스의

         종료를 기다린다.

 Status : 여러가지 정보를 얻고자 하는 경우

 Options : sys/wait.h 에 정의되어 있는 ‘WNOHANG’ 상수

                전달하게되면  이미 종료한 자식 프로세스가 없는 경우에

                대기 상태로 들어가지 않고 바로 리턴한다. ex) waitpid(-1 , int *status , WNOHANG);

* 시그널 핸들링

  자식 프로세스가 종료되는 순간에 커널이 부모 프로세스에게

  자식 프로세스가  종료 되었음을 알려줘서 이에 따른 처리를

   하게끔 구현하는 것

* 시그널 : 시스템 내의 특정 상황 발생을 알리기 위해서

                커널이 전달하는 신호

ex) linux 에서 kill -9 (pid)
역시도 시그널을 날리는 것이다.
9 : KILLSIG


* 시그널 핸들러 : 적절한 처리를 해주는 함수

* 시그널 핸들링 : 시그널이 발생함에 따라 이에 대한 적절한 처리를 해 주는 것

* 전달 대상 : 시그널 핸들러를 지니고 있는 프로세스


* signal( int signum ,  void (*func)(int) );

  Signum : 프로세스가 가로 채고자 하는 시그널 상수

  Func : 시그널을 처리할 함수의 포인터



* sigaction( int sugnum, const struct sigaction *act, struct sigaction *old act);

 

   Signum : 가로 채고자 하는 시그널의 종류를 인자로 전달

   Act : 새로 등록할 시그널 핸들러 정보를 초기화된 sigaction

           구조체 변수의  포인터를 인자로 전달

   Oldact : 이전에 등록되었던 시그널 핸들러의 포인터를 얻고자 사용

♣ fd_set 구조체

fd_set 구조체는 File Descriptor (이하 FD) 를 저장하는 구조체이다.

안에 내용을 보면 그냥 배열로 여기면 편하다.

 

구조체 내용은 OS마다 조금씩 다른 듯 하다.

내가 쓰는 Ubuntu 14 에선 /usr/include/sys/select.h 에서 위 구조체를 확인할 수 있었다.

 

♣ FD_SET

fd_set 구조체에 2와 5의 FD 를 저장한다고 하면,

두번째 비트와 다섯번째 비트가 1로 변경된다.

값 저장은 FD_SET 매크로를 쓴다.

 

fd_set testFds ;

FD_SET(2, &testFds) ;

FD_SET(5, &testFds) ;

 

위 testFds 구조체의 배열값을 출력해 보면,

0 1 0 0 1 0 0 0 0 ~~~

위와 같이 2번째와 5번째 비트가 1 로 세팅된다.

 

♣ FD_ZERO

언급했듯이 fd_set 구조체의 주요 변수는 배열이다.

fd_set testFds ; 와 같이 선언만 하고 안에 배열값을 찍어보면 쓰레기값이 있을 수 있다.

 

이에 구조체를 초기화 해야 하며 아래와 같이 한다.

FD_ZERO(&testFds) ;

 

위에 FD_SET 예제에서도 변수 선언 후, 초기화를 해 주어야 한다.

 

fd_set testFds ;

FD_ZERO(&testFds)

FD_SET(2, &testFds) ;

FD_SET(5, &testFds) ;

 

♣ FD_CLR

FD_SET(2, &testFds) ;

FD_SET(3, &testFds) ;

FD_SET(5, &testFds) ;

 

위와 같이 입력 후, testFds 는 아래와 같이 세팅된다.

0 1 1 0 1 0 0 0 0 ~~~

 

이 때 만약 3번 FD 를 지우고 싶으면 FD_CLR 매크로를 쓴다.

FD_CLR(3, &testFds) ;

 

결과는 아래와 같다. 세번째 값이 0으로 초기화 되었다.

0 1 0 0 1 0 0 0 0 ~~~~

 

♣ FD_ISSET

이 매크로는 아래 select 함수와 함께 설명한다.

 

 

♣ select()

select 함수는 fd_set 구조체에 할당된 FD 의 이벤트가 발생하면

이를 감지하고 어떤 FD 이벤트가 발생했는지 알려준다.

 

ex)

fd_set testFds ;

FD_SET(2, &testFds) ;

FD_SET(5, &testFds) ;

 

select(6, &testFds, NULL, NULL, NULL) ;

 

이는 FD 이벤트는 6 미만값만 체크하며,

6 미만 중 2와 5 FD 의 이벤트가 발생했을 때만 깨어난다.

 

만약 2번 FD 의 이벤트가 발생하여 select 함수가 깨어나고,

select 함수 이후에 testFds 를 찍어보면,

 

0 1 0 0 0 0 0 0 0 ~~~~~~~

식으로 값이 변경된다. -> 이걸 몰라 한참 헤맸다.

 

즉 testFds 에 2, 5 FD 를 저장한 후,

저장된 FD (2,5) 중 이벤트가 발생하면,

해당 이벤트만 1 로 남기고 모두 0 으로 세팅한다.

 

이제 어떤 FD의 이벤트가 발생했는지 체크하여 FD_ISSET 매크로를 사용한다.

 

if(FD_ISSET(2, &testFds))

{

  // 2번 FD 가 발생했다.

}

 

if(FD_ISSET(5, &testFds))

{

  // 5번 FD 가 발생했다.

}

위와 같이 해당 FD에 대한 후처리를 진행하면 된다.

 

 

♣ 틀 정립

select 함수는 위 예제처럼 testFds 를 변경시킨다.

그럼 select 함수 전이나 후로 매번 testFds 를 다시 세팅해 주어야 한다.

 

이에 아래와 같은 틀이 될 것이다.

 

Colored By Color Scripter™
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
fd_set readFds ;
FD_ZERO(&readFds) ;
FD_SET(2, &readFds) ;
FD_SET(5, &readFds) ;
 
while(1)
{
      // select 함수에서 fd_set 이 변경되니 원본 대신 복사본을 select 함수에 전달한다.
      checkFds = readFds ;
 
      printf("sleep - select()\n") ;
      select(6, &checkFds, NULL, NULL, NULL) ;
      printf("wake up - select()\n") ;
 
      if(FD_ISSET(2, &checkFds))
      {
          // 2번 FD 이벤트에 대한 사후 처리.
      }
 
      if(FD_ISSET(5, &checkFds))
      {
          // 5번 FD 이벤트에 대한 사후 처리.
      }
}
 

♣ 정리

이런 저런 코드를 보면서 원본 (readFds) 를 checkFds 로 복사하는 이유를 몰랐는데

select() 함수 내에서 fd_set 구조체 값을 변경하기 때문이다.

 

이를 위와 같이 정리하며 아래 내용이 빠져있다.

select() 함수의 리턴값 처리
select() 함수의 첫번째 인자 max FD 값의 처리
select() 함수의 세번째, 네번째 인자 writeFds, exceptFds 에 대한 처리.
select() 함수의 다섯번째 인자 타이머에 대한 처리.


예전에는 프로그램을 실행하는 흐름이 오로지 프로세스뿐이었으나, 소프트웨어가 진보하면서 하나의 프로그램에서 복잡한 동시 작업을 요구하기 시작하였다. 이를 위해서는 하나의 프로그램이 여러개의 프로세스를 만들어야 했는데 프로세스 특성상 하나의 프로그램이 이러한 동시 작업을 수월하게 할 수가 없었다
프로세스 외에 스레드를 이용하여 소켓 통신을 할 수있다.
그래서 프로세스보다 더 작은 실행 단위 개념이 만들어지게 되는데 이것이 스레드이다. 하나의 프로세스에서 여러개의 스레드가 메모리를 공유하여 작동할 수 있으며, 그래서 생성과 속도가 빠르고, 적은 메모리를 점유하며, 정보 교환이 쉽고 Context Switcing 부하가 적지만 그 대가로 자원 선점과 동기화 문제를 얻게 되었다. 대다수의 OS의 스케줄러는 스레드를 최소 단위로 하여 작동한다.

머리의 숫자는 둘 다 3개이나, 비글 3마리는 몸통도 3개지만, 케르베로스의 경우는 몸통 하나를 공유한다. 

프로세스는 서로 완벽히 독립적인 공간을 가진다. 각자가 각자의 스텍과 데이터 영역을 가지고, 보호받는다.
스레드는 각자가 각자의 스텍(지역변수)은 가지나, 데이터 영역은 하나를 공유한다. (레지스터셋(pc,sp) 등과 스택을 가진다. light-weight라고도 불림)

스레드를 만들때는 스택영역, 레지스터셋 (일부분)만을 복사한다. 레지스터는 main 함수의 다음 명령어를 가르키는 pc, sp 가 있어야하기때문에 필요하고, 각각의 지역변수를 위해 stack 영역이 필요함.
전역변수를 사용하여 서로 자원의 공유가 가능하다.

이로 말미암에 멀티 프로세스 프로그래밍 시 독립적인 애들 끼리 통신하기 위해서 프로세스간 통신[4] 이라는 번거로운 과정을 거쳐야만 한다. 비글 끼리 의사소통을 위해 서로 정해진 방법으로 왈왈 거리거나 소파를 뜯는 모양새를 상상하면 된다. 

스레드는 이와 달리, 데이터 영역을 공유하므로, 데이터 영역에 속하는 변수[5]를 통해서 쉽고 빠르고 편하게 통신할 수 있다. 케르베로스의 연결된 몸통을 통해서 신경이 다른 머리까지 닿아 있어서 왈왈거리지 않아도 머리간 의사소통이 가능하다.

(프로세스는 fork()를 이용하여 생성한다.)


임계영역 이란 ?
단일 태스킹 운영체제에서 실행되는 컴퓨터 프로그램은 자신의 활동을 조정하는데 도움을 주는 교통 신호등이 필요하지 않다. 이들은 길을 소유한 것 처럼 실행하며, 실제로도 그렇게한다. 이 들이 하는 일을 방해하는 것은 없다.

멀티태스킹 운영체제에서도 대부분의 프로그램은 서로 독립적으로 실행되는 것 처럼 보인다. 그러나 몇가지 문제가 발생할 수 있다.(ex : 두 프로그램이 같은 파일을 동시에 읽고쓸때)

멀티스레딩을 지원하는 운영체제에서도 상황이 난잡해지고 잠재적으로 위험해질 수 있다.
예를 들면 하나의 스레드가 하나 이상의 변수를 갱신하고, 또 다른 스레드가 그 변수들을 사용할 수 있다.

여러개의 변수나 데이터 구조체를 스레드가 공요한다면, 이와 같은 여러개의 변수나 구조체의 여러 필드는 자기들끼리의 일관성이 있어야한다. 공유하는 변수를 사용하는 또 다른 스레드가 일관성이 없는 데이터를 다루게 될 수도 있다

결과적으로 충돌이 발생한다.
이때 우리에게 필요한 것은 프로그래밍에서 교통 신호등에 상응하는 것으로 , 스레드 교통을 조정하고 동기화하는 것을 도와주는 임계영역(critical section)이다. 

**mutex**

mutex 는 여러개의 쓰레드가 공유하는 데이타를 보호하기 위해서 사용되는 도구로써, 

보호하고자 하는 데이타를 다루는 코드영역을 단지 '한번에 하나의 쓰레드만' 실행가능 하도록 하는 방법으로 공유되는 데이타를 보호한다. 

이러한 코드영역(하나의 쓰레드만 점유가능한)을 critical section 이라고 하며, mutex 관련 API 를 이용해서 관리할수 있다.
이와 같이 공유자원에는 한번에 하나의 쓰레드만 접근할수 있도록 허용하는 메커니즘이 바로 MUTEX 입니다.

pthread_mutex_init 는 mutex 객체를 초기화 시키기 위해서 사용한다. 첫번째 인자로 주어지는 mutex 객체 mutex를 초기화시키며, 

두번째 인자인 attr 를 이용해서 mutex 특성을 변경할수 있다. 기본 mutex 특성을 이용하기 원한다면 NULL 을 사용하면 된다.

mutex 특성(종류) 에는 "fast", "recurisev", "error checking" 의 종류가 있으며, 디폴트으로 "fast" 가 사용된다.

이제 pthread_mutex_lock() 과 pthread_mutex_unlock() 사이의 critical section 은 한번에 하나의 쓰레드만 수행할수 있고, 먼저 이 critical section에 진입한 쓰레드가 종료할때까지 다른 쓰레드는 대기상태에 있다가, 앞선 쓰레드가 critical section 을 끝내고 빠져나오면 진입하게 됩니다.


명령어=>
pthread_create() : 새로운 쓰레드를 생성한다.
ex) pthread_create(&thread_1, NULL, 호출할 함수, 함수에 줄 인자값)
첫번째인자: pthread_t의 데이터 구조체의 주소 쉽게 말해 쓰레드를 구분해주는 정보(tid)
세번째인자: 호출할 함수
네번째인자: 호출할 함수에 줄 인자

pthread_join() : 다른 쓰레드가 종료되길 기다린다. 왜냐하면 메인스레드가 종료되는데 다른 스레드가 처리도 못하고 끝날수도 있기 때문. (= 프로세스의 wait()와 비슷) 메인스레드가 서브스레드를 기다린다.
ex)pthread_join(thread_1,NULL)
첫번째인자 : thread_1 의 ID (tid)
두번쨰인자 : 리턴값








출처: http://bitsoul.tistory.com/172 [Happy Programmer~]



출처: http://hahaite.tistory.com/290 [Hosang's Homepage]

https://blog.naver.com/sdug12051205/221055304977

