컴퓨터에 따라 메모리에 값을 저장하는 방식은 두가지가 있는데 다음과 같다.

 

1. 빅 엔디안

2. 리틀 엔디안

 

1.빅 에디안은 큰 단위부터 메모리에 적는 방식이다.
	

	0x1234 5678
	Memory
	 1   }    ===> 1byte 단위로 끊는다
	 2   }

	 3   }    
	 4   }

	 5   }
	 6   }

	 7   }
	 8   }

부호비트는 제일 앞에 붙기 때문에 이 방식은 부호비트 확인이 빠르다.

네트워크 통신시에 헤더파일은 제일 앞에 파일 붙기때문에 헤더파일 확인이 쉽고, 이로인해 네트워크 통신시에는 빅에디안 방식을 사용한다

2.리틀 에디안은 작은 단위부터 메모리에 적는 방식이다.

	0x1234 5678
	Memory
	 7   }    ===> 1byte 단위로 끊는다
	 8   }

	 5   }    
	 6   }

	 3   }
	 4   }

	 1   }
	 2   }

연산을 할때 가장 뒷자리부터 계산을 해야 쉽게 계산을 할 수 있다.
이 방식은 작은단위(뒷자리)부터 메모리에 적기 때문에 연산이 빠르다는 장점이 있다.
때문에 연산을 많이 하는 일반 PC는 보통 리틀에디안 방식으로 구현되어있다.

위 같이 장단점으로 인해 방식이 둘로 나뉘고 이로인해 네트워크 통신을 할때 문제가 발생하게 된다.

전송하는 측은 빅 엔디안으로 전송을 하는데 받는 컴퓨터 입장에서는 리틀 엔디안으로 처리를 하기 때문에 실제로 데이터를 

수신을 하면 원래 데이터와 달라져 버리는 문제가 발생한다.(빅 엔디안 방식을 리틀 엔디안으로 읽기 때문)

이 문제를 해결하기 위해 받는 측(리틀 엔디안)에서는 전송받은 데이터(빅 엔디안)를 뒤집어서 처리를 해줘야 하는데 

이는 read() , write()  함수 내부에서 구현이 다 되있다.

따라서 우리는 포트번호와 IP 주소만 처리를 해주면 된다.​

포트는 2byte(16bit) 로 이루어져있고 IP는 4byte(32bit)로 이루어져있다.

보통 C 언어에서 bit 할당할 경우 다음과 같이 사용한다.

1byte = char

2byte = short

4byte = long

8byte = long long

int 를 사용하지 않는 이유는 컴퓨터의 bit체계 마다 다르기 때문이다.( 32bit컴퓨터는 4byte, 64bit 컴퓨터는 8byte)

기본적으로 PC는 리틀 엔디안으로 되있기 때문에 이를 빅 엔디안으로 변경하는 방법은 다음과 같다.


char * port = "1234"

char * ip = "168.192.10.100" 


포트의 경우 : unsigned short test1 = htons(port);

IP의 경우    : unsigned long test2 = htonl(ip);

 

이렇게 하면 각 test1 , test2 에 리틀 엔디안에서 빅 엔디안으로 변경된 값이 저장된다.

